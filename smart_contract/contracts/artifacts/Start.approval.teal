#pragma version 9

// This TEAL was generated by TEALScript v0.44.0
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createApplication(string)void
abi_route_createApplication:
	// proposal: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 1 0

	// contracts/start.algo.ts:17
	// this.proposal.value = proposal
	byte "proposal"
	frame_dig -1 // proposal: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// bootstrap()uint64
//
// // Make and asset. This is one tnx call
abi_route_bootstrap:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute bootstrap()uint64
	callsub bootstrap
	int 1
	return

bootstrap:
	proto 1 0

	// contracts/start.algo.ts:22
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert

	// contracts/start.algo.ts:23
	// assert(!this.registeredAsaId.exists)
	txna Applications 0
	byte "registeredAsaId"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/start.algo.ts:25
	// registeredAsa = sendAssetCreation({
	//       configAssetTotal: 1_000, // Total supply
	//       configAssetFreeze: this.app.address, // This contract has the ability to freeze assets
	//       configAssetClawback: this.app.address, // This contract takes back assets on close out
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/start.algo.ts:26
	// configAssetTotal: 1_000
	int 1_000
	itxn_field ConfigAssetTotal

	// contracts/start.algo.ts:27
	// configAssetFreeze: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field ConfigAssetFreeze

	// contracts/start.algo.ts:28
	// configAssetClawback: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field ConfigAssetClawback

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury -1 // registeredAsa: asset

	// contracts/start.algo.ts:31
	// this.registeredAsaId.value = registeredAsa
	byte "registeredAsaId"
	frame_dig -1 // registeredAsa: asset
	app_global_put

	// contracts/start.algo.ts:32
	// return registeredAsa;
	frame_dig -1 // registeredAsa: asset
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// register(asset)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_register:
	// registeredASA: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute register(asset)void
	callsub register
	int 1
	return

register:
	proto 1 0

	// contracts/start.algo.ts:40
	// assert(this.txn.sender.assetBalance(this.registeredAsaId.value) === 0)
	txn Sender
	byte "registeredAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 0
	==
	assert

	// contracts/start.algo.ts:41
	// sendAssetTransfer({
	//       xferAsset: this.registeredAsaId.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/start.algo.ts:42
	// xferAsset: this.registeredAsaId.value
	byte "registeredAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/start.algo.ts:43
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/start.algo.ts:44
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/start.algo.ts:47
	// sendAssetFreeze({
	//       freezeAsset: this.registeredAsaId.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts/start.algo.ts:48
	// freezeAsset: this.registeredAsaId.value
	byte "registeredAsaId"
	app_global_get
	itxn_field FreezeAsset

	// contracts/start.algo.ts:49
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts/start.algo.ts:50
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getRegisteredASA()uint64
abi_route_getRegisteredASA:
	// execute getRegisteredASA()uint64
	callsub getRegisteredASA
	int 1
	return

getRegisteredASA:
	proto 0 0

	// contracts/start.algo.ts:55
	// return this.registeredAsaId.value;
	byte "registeredAsaId"
	app_global_get
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// vote(asset,bool,pay)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_vote:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// registeredASA: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// inFavor: bool
	txna ApplicationArgs 1
	int 0
	getbit

	// boxMBRPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute vote(asset,bool,pay)void
	callsub vote
	int 1
	return

vote:
	proto 4 0

	// contracts/start.algo.ts:61
	// assert(this.txn.sender.assetBalance(this.registeredAsaId.value) === 1)
	txn Sender
	byte "registeredAsaId"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/start.algo.ts:62
	// assert(!this.inFavor(this.txn.sender).exists)
	txn Sender
	box_len
	swap
	pop
	!
	assert

	// contracts/start.algo.ts:63
	// this.inFavor(this.txn.sender).value = inFavor
	txn Sender
	frame_dig -2 // inFavor: bool
	byte 0x00
	int 0
	uncover 2
	setbit
	box_put

	// contracts/start.algo.ts:65
	// preBoxMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -4 // preBoxMBR: uint64

	// contracts/start.algo.ts:67
	// verifyTxn(boxMBRPayment, {
	//       receiver: this.app.address, // Payment receiver
	//       amount: this.app.address.minBalance - preBoxMBR, // Subtract whatever the current
	//       // MBR amount is from the previous
	//     })
	// verify receiver
	frame_dig -1 // boxMBRPayment: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// verify amount
	frame_dig -1 // boxMBRPayment: pay
	gtxns Amount
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_dig -4 // preBoxMBR: uint64
	-
	==
	assert

	// contracts/start.algo.ts:73
	// this.votesTotal.value = this.votesTotal.value + 1
	byte "votesTotal"
	byte "votesTotal"
	app_global_get
	int 1
	+
	app_global_put

	// if0_condition
	// contracts/start.algo.ts:75
	// inFavor
	frame_dig -2 // inFavor: bool
	bz if0_end

	// if0_consequent
	// contracts/start.algo.ts:76
	// this.votesInFavor.value = this.votesInFavor.value + 1
	byte "votesInFavor"
	byte "votesInFavor"
	app_global_get
	int 1
	+
	app_global_put

if0_end:
	retsub

// deregister(asset)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_deregister:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// registeredASA: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute deregister(asset)void
	callsub deregister
	int 1
	return

deregister:
	proto 2 0

	// if1_condition
	// contracts/start.algo.ts:83
	// this.inFavor(this.txn.sender).exists
	txn Sender
	box_len
	swap
	pop
	bz if1_end

	// if1_consequent
	// contracts/start.algo.ts:84
	// this.votesTotal.value = this.votesTotal.value - 1
	byte "votesTotal"
	byte "votesTotal"
	app_global_get
	int 1
	-
	app_global_put

	// if2_condition
	// contracts/start.algo.ts:85
	// this.inFavor(this.txn.sender).value
	txn Sender
	box_get
	assert
	int 0
	getbit
	bz if2_end

	// if2_consequent
	// contracts/start.algo.ts:86
	// this.votesInFavor.value = this.votesInFavor.value - 1
	byte "votesInFavor"
	byte "votesInFavor"
	app_global_get
	int 1
	-
	app_global_put

if2_end:
	// contracts/start.algo.ts:89
	// preMBR = this.app.address.minBalance
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	frame_bury -2 // preMBR: uint64

	// contracts/start.algo.ts:90
	// this.inFavor(this.txn.sender).delete()
	txn Sender
	box_del

	// contracts/start.algo.ts:92
	// sendPayment({
	//         amount: preMBR - this.app.address.minBalance,
	//         receiver: this.txn.sender,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/start.algo.ts:93
	// amount: preMBR - this.app.address.minBalance
	frame_dig -2 // preMBR: uint64
	txna Applications 0
	app_params_get AppAddress
	assert
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// contracts/start.algo.ts:94
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

if1_end:
	// contracts/start.algo.ts:98
	// sendAssetTransfer({
	//       xferAsset: this.registeredAsaId.value,
	//       assetSender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/start.algo.ts:99
	// xferAsset: this.registeredAsaId.value
	byte "registeredAsaId"
	app_global_get
	itxn_field XferAsset

	// contracts/start.algo.ts:100
	// assetSender: this.txn.sender
	txn Sender
	itxn_field AssetSender

	// contracts/start.algo.ts:101
	// assetReceiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetReceiver

	// contracts/start.algo.ts:102
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getProposal()string
abi_route_getProposal:
	// execute getProposal()string
	callsub getProposal
	int 1
	return

getProposal:
	proto 0 0

	// contracts/start.algo.ts:107
	// return this.proposal.value;
	byte "proposal"
	app_global_get
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// getVotes()(uint64,uint64)
abi_route_getVotes:
	// execute getVotes()(uint64,uint64)
	callsub getVotes
	int 1
	return

getVotes:
	proto 0 0

	// contracts/start.algo.ts:111
	// return [this.votesInFavor.value, this.votesTotal.value];
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0010 // initial head offset
	byte "votesInFavor"
	app_global_get
	itob
	callsub process_static_tuple_element
	byte "votesTotal"
	app_global_get
	itob
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	byte 0x151f7c75
	swap
	concat
	log
	retsub

create_NoOp:
	method "createApplication(string)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "bootstrap()uint64"
	method "register(asset)void"
	method "getRegisteredASA()uint64"
	method "vote(pay,bool,asset)void"
	method "deregister(asset)void"
	method "getProposal()string"
	method "getVotes()(uint64,uint64)"
	txna ApplicationArgs 0
	match abi_route_bootstrap abi_route_register abi_route_getRegisteredASA abi_route_vote abi_route_deregister abi_route_getProposal abi_route_getVotes
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub